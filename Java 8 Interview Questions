        New features introduced in Java 8?
==========================================================
Lambda expressions
Stream API
Functional interfaces
Default and static methods in interfaces
Method references
Optional class
New Date and Time API (java.time package)
Nashorn JavaScript engine
==========================================================
==========================================================

                Lambda expressions

==========================================================
==========================================================
A lambda expression in Java is a concise way to represent an anonymous function (a function without a name) that can be passed around as a value.
Lambda expressions were introduced in Java 8 and are a key feature of functional programming in Java. 
They are commonly used with functional interfaces (interfaces with a single abstract method).

==========================================================
==========================================================
               Functional interface
==========================================================
==========================================================
A functional interface is an interface with exactly one abstract method. Examples include Runnable, Comparator, and Consumer. 
Java 8 introduced the @FunctionalInterface annotation to mark such interfaces.

What are the built-in functional interfaces in Java 8?
---------------------------------------------------------------------------
Predicate<T>: Represents a boolean-valued function (e.g., x -> x > 5).

Consumer<T>: Represents an operation that accepts a single input and returns no result (e.g., x -> System.out.println(x)).

Function<T, R>: Represents a function that accepts one argument and produces a result (e.g., x -> x * 2).

Supplier<T>: Represents a supplier of results (e.g., () -> "Hello").
---------------------------------------------------------------------------
What is the difference between a lambda expression and an anonymous class?

Lambda expressions are more concise and do not create a new class file at compile time.

Anonymous classes are more verbose and create a new class file.
---------------------------------------------------------------------------
What is the Stream API in Java 8?

The Stream API is used to process collections of objects in a functional style. It supports operations like filter, map, reduce, and collect.
---------------------------------------------------------------------------
What is the difference between Collection and Stream?

Collection: A data structure that holds elements (e.g., List, Set).

Stream: A sequence of elements supporting sequential and parallel aggregate operations (e.g., filter, map, reduce).
---------------------------------------------------------------------------
What are intermediate and terminal operations in the Stream API?

Intermediate operations: Operations like filter, map, and sorted that return a new stream.

Terminal operations: Operations like forEach, collect, and reduce that produce a result or side-effect.
Intermediate Operations
Definition: These operations process the data and return a new stream.
Characteristics:
They are lazy, meaning they donâ€™t execute until a terminal operation is called.
They return another Stream<T>, allowing method chaining.
They don't modify the original stream but create a transformed version.
Examples of Intermediate Operations
----------------------------------
Common Intermediate Operations:
----------------------------------
filter(Predicate predicate):

Keeps elements that match the given predicate (condition).
Example:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
List<Integer> evenNumbers = numbers.stream()
    .filter(n -> n % 2 == 0)
    .toList(); // or .collect(Collectors.toList()) before java 16.
// evenNumbers: [2, 4, 6]
----------------------------------
map(Function mapper):

Transforms each element using the provided function.
Example:

List<String> words = Arrays.asList("apple", "banana", "cherry");
List<Integer> wordLengths = words.stream()
    .map(String::length)
    .toList(); // or .collect(Collectors.toList()) before java 16.
// wordLengths: [5, 6, 6]
----------------------------------
flatMap(Function mapper):
Used when transformation produces multiple values per input.
Flattens the stream to a single level.
Flattens nested collections or arrays into a single stream.
Example:
List<List<String>> nestedLists = Arrays.asList(
    Arrays.asList("a", "b"),
    Arrays.asList("c", "d")
);
List<String> flattenedList = nestedLists.stream()
    .flatMap(List::stream)
    .toList(); // or .collect(Collectors.toList()) before java 16.
// flattenedList: [a, b, c, d]
distinct():
----------------------------------
Removes duplicate elements.
Example:

List<Integer> numbers = Arrays.asList(1, 2, 2, 3, 3, 4);
List<Integer> uniqueNumbers = numbers.stream()
    .distinct()
    .toList(); // or .collect(Collectors.toList()) before java 16.
// uniqueNumbers: [1, 2, 3, 4]
----------------------------------
sorted() / sorted(Comparator comparator):

Sorts the elements in natural order or using a custom comparator.
Example:
List<String> names = Arrays.asList("Charlie", "Alice", "Bob");
List<String> sortedNames = names.stream()
    .sorted()
    .toList(); // or .collect(Collectors.toList()) before java 16.
// sortedNames: [Alice, Bob, Charlie]
----------------------------------
limit(long maxSize):
Limits the stream to the specified number of elements.
Example:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> limitedNumbers = numbers.stream()
    .limit(3)
    .toList(); // or .collect(Collectors.toList()) before java 16.
// limitedNumbers: [1, 2, 3]
----------------------------------
skip(long n):

Skips the specified number of elements from the beginning of the stream.
Example:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> skippedNumbers = numbers.stream()
    .skip(2)
    .toList(); // or .collect(Collectors.toList()) before java 16.
// skippedNumbers: [3, 4, 5]
----------------------------------
peek(Consumer action):

performs an action on each element as elements are consumed from the resulting stream. Primarily useful to support debugging.
Example:
----------------------------------
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> peekedNumbers = numbers.stream()
    .peek(System.out::println)
    .toList();
//output: 1, 2, 3, 4, 5.
---------------------------------------------------------------------------
Terminal Operations
Definition: These operations consume the stream and produce a result or a side effect.
Characteristics:
They trigger intermediate operations.
Once a terminal operation is executed, the stream cannot be reused.
They return non-stream values like List<T>, Optional<T>, int, etc.
---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------

---------------------------------------------------------------------------
